{"id":663869423,"lang":"java","time":"5Â months","timestamp":1647800434,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/663869423/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        TreeNode ans=new TreeNode(0);\n        traverse(root,p,q,ans);\n        return ans.left;\n    }\n    void traverse(TreeNode root, TreeNode p, TreeNode q,TreeNode ans){\n        if(root==null)  return ;\n        if(root.left==p && root.right==q){\n            ans.left=new TreeNode(root.val);\n        }\n        traverse(root.left,p,q,ans);\n        traverse(root.right,p,q,ans);\n    }\n}","compare_result":"100000100000000010000000000","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}