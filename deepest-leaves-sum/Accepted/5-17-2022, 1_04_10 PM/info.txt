{"id":701264074,"lang":"java","time":"3Â months","timestamp":1652772850,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/701264074/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"56.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int sum=0;\n    public int deepestLeavesSum(TreeNode root) {\n        int findmaxl= traverse(root);\n        traverse2(root, findmaxl , 1);\n        return sum;\n    }\n    void traverse2(TreeNode root, int n, int k){\n        if(root==null)  return ;\n        if(k==n)    sum=sum+root.val;\n        traverse2(root.left,n,k+1);\n        traverse2(root.right,n,k+1);\n    }\n    int traverse(TreeNode root){\n        if(root==null)  return 0;\n        return Math.max(1+traverse(root.left),1+traverse(root.right));\n    }\n    \n}","compare_result":"11111111111111111111111111111111111","title_slug":"deepest-leaves-sum"}