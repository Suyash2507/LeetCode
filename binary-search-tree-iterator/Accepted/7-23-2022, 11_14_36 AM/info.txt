{"id":754247755,"lang":"java","time":"3 weeks, 6 days","timestamp":1658555076,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/754247755/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"52.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    TreeNode node;\n    List<Integer> al;\n    int z = 0;\n    void getValues(TreeNode node){\n        if(node==null)  return;\n        al.add(node.val);\n        getValues(node.left);\n        getValues(node.right);\n    }\n    public BSTIterator(TreeNode root) {\n        node = root;\n        al = new ArrayList();\n        getValues(root);\n        Collections.sort(al);\n    }\n    public int next() {\n        int k = (int)al.get(z++);\n        return k;\n    }\n    \n    public boolean hasNext() {\n        return z==al.size() ? false : true;\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}