{"id":773674222,"lang":"java","time":"4 days, 13 hours","timestamp":1660502058,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/773674222/","is_pending":"Not Pending","title":"Grid Game","memory":"56.8 MB","code":"class Solution {\n    public long gridGame(int[][] grid) {\n        int n = grid[0].length;\n        long[][] pref = new long[2][n];\n        for(int i=0;i<2;i++){\n            for(int j=0;j<n;j++){\n                if(j==0)    pref[i][j] = grid[i][j];\n                else pref[i][j] = grid[i][j] + pref[i][j-1];\n            }\n        }\n        long min=Long.MAX_VALUE;\n        for(int i=0;i<n;i++){\n            min = Math.min(min , Math.max(pref[0][n-1]-pref[0][i], (i-1<0 ? 0 : pref[1][i-1])));\n        }\n        return min;\n        /*\n        long[][] dp = new long[3][1 + grid[0].length];\n        long[][] dp2 = new long[3][1 + grid[0].length];\n        long[][] replica = new long[3][1 + grid[0].length];\n        for(int i=1;i<=2;++i){\n            for(int j=1;j<=grid[0].length;++j){\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + grid[i-1][j-1];\n            }\n        }\n        int a = 2, b = grid[0].length;\n        replica[1][1] = Integer.MIN_VALUE;\n        while(a!=1 || b!=1){\n            replica[a][b] = Integer.MIN_VALUE;\n            if(dp[a-1][b] > dp[a][b-1]){\n                a -= 1;\n            }\n            else b -= 1;\n        }\n        for(int m=1;m<=2;++m){\n            for(int n=1;n<=grid[0].length;++n){\n                if(replica[m][n] != Integer.MIN_VALUE){\n                    dp2[m][n] = Math.max(replica[m-1][n], dp2[m][n-1]) + grid[m-1][n-1];\n                }\n                //System.out.print(dp2[m][n]+\"  \");\n            }\n            //System.out.println();\n        }\n        return Math.max(dp2[1][grid[0].length], dp2[2][grid[0].length-1]);\n        */\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"grid-game"}