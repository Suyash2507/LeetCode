{"id":728282494,"lang":"java","time":"1 month, 4 weeks","timestamp":1655882741,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/728282494/","is_pending":"Not Pending","title":"Longest Subarray of 1's After Deleting One Element","memory":"58.5 MB","code":"class Solution {\n    public int longestSubarray(int[] A) {\n        int i = 0, j, k = 1, res = 0;\n        for (j = 0; j < A.length; ++j) {\n            if (A[j] == 0) {\n                k--;\n            }\n            while (k < 0) {\n                if (A[i] == 0){\n                    k++;\n                }\n                i++;\n            }\n            res = Math.max(res, j - i);\n        }\n        return res;\n    }\n    /*public int longestSubarray(int[] nums) {\n        int i=0,j=0,ans=Integer.MIN_VALUE;\n        ArrayList<Integer> al = new ArrayList<>();\n        while(j<nums.length){\n            if(nums[j]==0){\n                if(al.contains(0)){\n                    while(al.contains(0) && i<nums.length){\n                        al.remove(i);i++;\n                    }\n                    ans = Math.max(ans,al.size()+1);\n                }\n                else{\n                    ans = Math.max(ans,al.size()+1);\n                }\n                al.clear();\n                al.add(0);\n            }\n            else{\n                al.add(nums[j]);\n                ans = Math.max(ans,al.size());\n            }\n            j++;\n            System.out.println(al);\n        }\n        return ans;\n    }\n    */\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element"}