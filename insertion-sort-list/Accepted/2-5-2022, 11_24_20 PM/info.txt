{"id":635126365,"lang":"java","time":"6 months, 2 weeks","timestamp":1644083660,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/635126365/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"41.6 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if(head==null)  return null;\n        if(head.next==null) return new ListNode(head.val);\n        ArrayList<Integer> al=new ArrayList<>();\n        while(head!=null){\n            al.add(head.val);\n            head=head.next;\n        }\n        int[] t=new int[al.size()];\n        for(int i=0;i<al.size();i++){\n            t[i]=(int)al.get(i);\n        }\n        int[] finans= sort(t);\n        ListNode temp=new ListNode(finans[0]);\n        ListNode sol=temp;\n        for(int j=1;j<finans.length;j++){\n            temp.next= new ListNode(finans[j]);\n            temp=temp.next;\n        }\n        return sol;\n    }\n    public int[] sort(int[] arr){\n        int n = arr.length;\n        for (int i = 1; i < n; ++i) {\n            int key = arr[i];\n            int j = i - 1;\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n            arr[j + 1] = key;\n        }\n        return arr;\n    }\n}","compare_result":"1111111111111111111","title_slug":"insertion-sort-list"}