{"id":746876172,"lang":"java","time":"1Â month","timestamp":1657797521,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/746876172/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"44.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int index;\n    Map<Integer, Integer> hm;\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        index = inorder.length-1;\n        hm = new HashMap<>();\n        for(int i=0;i<inorder.length;++i) {\n            hm.put(inorder[i], i);\n        }\n        return tree(postorder, 0, postorder.length-1);\n    }\n    TreeNode tree(int[] postorder, int left, int right) {\n        if(left>right) return null;\n        int val = postorder[index--];\n        TreeNode root = new TreeNode(val);\n        root.right = tree(postorder, hm.get(val)+1, right);\n        root.left = tree(postorder, left, hm.get(val)-1);\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}