{"id":724492052,"lang":"java","time":"2Â months","timestamp":1655478813,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/724492052/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int ans;\n    Set<TreeNode> covered;\n    public int minCameraCover(TreeNode root) {\n        ans = 0;\n        covered = new HashSet();\n        covered.add(null);\n        dfs(root, null);\n        return ans;\n    }\n    public void dfs(TreeNode node, TreeNode par) {\n        if (node != null) {\n            dfs(node.left, node);\n            dfs(node.right, node);\n            if (par == null && !covered.contains(node) ||!covered.contains(node.left) || !covered.contains(node.right)) {\n                ans++;\n                covered.add(node);\n                covered.add(par);\n                covered.add(node.left);\n                covered.add(node.right);\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}