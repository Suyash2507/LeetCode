{"id":768137377,"lang":"java","time":"1 week, 4 days","timestamp":1659935974,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/768137377/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        int[][] dp =new int[n+1][n+1];\n        for(int i=0;i<=n;i++){\n            for(int j=0;j<=n;j++){\n                if(i==0 || j==0)    continue;\n                if(nums[i-1]<nums[j-1])    dp[i][j] = 1 + dp[i-1][j-1];\n                else    dp[i][j] = Math.max(dp[i-1][j] , dp[i][j-1]);\n            }\n        }  \n        return dp[n][n];\n    }\n}","compare_result":"010000000000110000000000000100000000000000000000000000","title_slug":"longest-increasing-subsequence"}