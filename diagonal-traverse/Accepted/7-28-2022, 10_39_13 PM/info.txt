{"id":759188055,"lang":"java","time":"3Â weeks","timestamp":1659028153,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/759188055/","is_pending":"Not Pending","title":"Diagonal Traverse","memory":"55.5 MB","code":"class Solution {\n    public int[] findDiagonalOrder(int[][] mat) {\n        int m = mat.length;\n        int n = mat[0].length;\n        int[] sol=new int[m*n];\n        int z = 0, j = 0 ,count = 0;\n        List<Integer> l =new ArrayList();\n        for(int i=0;i<mat.length;i++){\n            int  k = i; j=0;\n            l.clear();\n            while(j<n && k>=0){\n                l.add(mat[k][j]);\n                k--;j++;\n            }\n            if(count==1){\n                Collections.reverse(l);\n                count = 0;\n            }\n            else {count = 1;}\n            for(int w=0;w<l.size();w++){\n                sol[z++] = (int)l.get(w);\n            }\n        }\n        for(int q=1;q<n;q++){\n            l.clear();\n            int j1 = q; \n            int i1 = m-1;\n            while(i1>=0 && j1<n){\n                l.add(mat[i1][j1]);\n                i1--;j1++;\n            }\n            if(count==1){\n                Collections.reverse(l);\n                count = 0;\n            }\n            else {count = 1;}\n            for(int w1=0;w1<l.size();w1++){\n                sol[z++] = (int)l.get(w1);\n            }\n        }\n        return sol;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"diagonal-traverse"}