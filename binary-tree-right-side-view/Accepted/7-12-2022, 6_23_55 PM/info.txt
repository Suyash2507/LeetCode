{"id":745169174,"lang":"java","time":"1 month, 1 week","timestamp":1657630435,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/745169174/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"43.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer> sol;\n    HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();\n    public List<Integer> rightSideView(TreeNode root) {\n        sol = new ArrayList<>();\n        if(root==null)  return sol;\n        dfs(root,1);\n        for(Map.Entry e : hm.entrySet()){\n            sol.add((int)e.getValue());\n        }\n        return sol;\n    }\n    void dfs(TreeNode root,int level){\n        if(root==null)  return ;\n        else{\n            hm.put(level, root.val);\n            dfs(root.left, 1+level);\n            dfs(root.right, 1+level);\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}