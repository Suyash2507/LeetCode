{"id":745969210,"lang":"java","time":"1Â month","timestamp":1657706695,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/745969210/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"43.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<List<Integer>> sol = new ArrayList<>();\n    HashMap<Integer,List<Integer>> hm = new HashMap<Integer,List<Integer>>();\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        check(root,1);\n        for(Map.Entry<Integer, List<Integer>> e : hm.entrySet()){\n            List<Integer> tt = e.getValue();\n            sol.add(tt);\n        }\n        return sol;\n    }\n    void check(TreeNode root, int level){\n        if(root==null)  return;\n        else{\n            if(hm.containsKey(level)){\n                List<Integer> t = hm.get(level);\n                t.add(root.val);\n                hm.put(level, t);\n            }else   hm.put(level, new ArrayList<>(Arrays.asList(root.val)));\n            check(root.left,1+level);\n            check(root.right,1+level);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}