{"id":657672490,"lang":"java","time":"5 months, 1 week","timestamp":1646978307,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/657672490/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"47.8 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) p = p.next;\n        if (q != null) q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}\n        /*\n        ArrayList<Integer> al1=new ArrayList<Integer>();\n        ArrayList<Integer> al2=new ArrayList<Integer>();\n        ArrayList<Integer> al=new ArrayList<Integer>();\n        int max= (al1.size()>al2.size())?al1.size():al2.size();\n        while(l1!=null){\n            al1.add(l1.val);\n            l1=l1.next;\n        }\n        while(l2!=null){\n            al2.add(l2.val);\n            l2=l2.next;\n        }\n        int carry=0;\n        int z=max-1;\n        int[] sol=new int[max];\n        for(int i=0;i<max;i++){\n            int k=0,a=0,b=0;\n            if((al1.size()-i-1)>=0){\n                a= (int)al1.get(al1.size()-i-1);    \n            }\n            System.out.println(al2.size()-i-1);\n            if((al2.size()-i-1)>=0){\n                b= (int)al2.get(al2.size()-i-1);    \n            }\n            carry= carry+a+b;\n            if(carry>9){\n                k= carry%10;\n                carry= carry/10;\n            }\n            else{\n                k= carry;\n                carry=0;\n            }\n            sol[z]=k;\n            z--;\n        }\n\n        ListNode ll= new ListNode(0);\n        ListNode temp = ll;\n        for(int w=max-1;w>=0;w--){\n            ll.next= new ListNode(sol[w]);\n            ll=ll.next;\n        }\n        return temp.next; \n        */\n    }","compare_resulttitle_slug":"add-two-numbers"}