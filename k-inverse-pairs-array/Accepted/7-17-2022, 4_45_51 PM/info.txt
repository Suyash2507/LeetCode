{"id":749349451,"lang":"java","time":"1Â month","timestamp":1658056551,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/749349451/","is_pending":"Not Pending","title":"K Inverse Pairs Array","memory":"47.8 MB","code":"public class Solution {\n    public int kInversePairs(int n, int k) {\n        int[][] dp = new int[n + 1][k + 1];\n        int M = 1000000007;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= k; j++) {\n                if (j == 0)\n                    dp[i][j] = 1;\n                else {\n                    int val = (dp[i - 1][j] + M - ((j - i) >= 0 ? dp[i - 1][j - i] : 0)) % M;\n                    dp[i][j] = (dp[i][j - 1] + val) % M;\n                }\n            }\n        }\n        return ((dp[n][k] + M - (k > 0 ? dp[n][k - 1] : 0)) % M);\n    }\n}\n/*public class Solution {\n    public int kInversePairs(int n, int k) {\n        int[][] dp = new int[n+1][k+1];\n        for (int i=1;i<=n;++i) {\n            for (int j=0;j<=k;++j) {\n                if(j==0) dp[i][j] = 1;\n                else {\n                    for (int p=0;p<=Math.min(j,i-1);p++)   dp[i][j] = (dp[i][j] + dp[i-1][j-p])%1000000007;\n                }\n            }\n        }\n        return dp[n][k];\n    }\n}\n*/\n/*public class Solution {\n    Integer[][] dp = new Integer[1001][1001];\n    public int kInversePairs(int n, int k) {\n        return helper(n,k);\n    }\n    int helper(int n, int k){\n        if(n==0)    return 0;\n        if(k==1)    return 1;\n        if(dp[n][k] != null)    return dp[n][k];\n        int t=0;\n        for(int i=0;i<=Math.min(k,n - 1);i++){\n             t = (t + helper(n - 1,k - i)) % 1000000007;\n        }\n        dp[n][k] = t;\n        return t;\n    }\n}\n*/","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-inverse-pairs-array"}