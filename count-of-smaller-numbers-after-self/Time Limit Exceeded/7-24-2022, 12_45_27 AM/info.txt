{"id":754791706,"lang":"java","time":"3 weeks, 5 days","timestamp":1658603727,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/754791706/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"N/A","code":"public class Solution {\n\tpublic List<Integer> countSmaller(int[] nums) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tif(nums == null || nums.length == 0) return res;\n\t\tTreeNode root = new TreeNode(nums[nums.length - 1]);\n\t\tres.add(0);\n\t\tfor(int i = nums.length - 2; i >= 0; i--) {\n\t\t\tint count = insertNode(root, nums[i]);\n\t\t\tres.add(count);\n\t\t}\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n\tpublic int insertNode(TreeNode root, int val) {\n\t\tint thisCount = 0;\n\t\twhile(true) {\n\t\t\tif(val <= root.val) {\n\t\t\t\troot.count++;\n\t\t\t\tif(root.left == null) {\n\t\t\t\t\troot.left = new TreeNode(val); break;\n\t\t\t\t} else {\n\t\t\t\t\troot = root.left;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthisCount += root.count;\n\t\t\t\tif(root.right == null) {\n\t\t\t\t\troot.right = new TreeNode(val); break;\n\t\t\t\t} else {\n\t\t\t\t\troot = root.right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn thisCount;\n\t}\n}\nclass TreeNode {\n\tTreeNode left; \n\tTreeNode right;\n\tint val;\n\tint count = 1;\n\tpublic TreeNode(int val) {\n\t\tthis.val = val;\n\t}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111000","title_slug":"count-of-smaller-numbers-after-self"}