{"id":757341639,"lang":"java","time":"3 weeks, 2 days","timestamp":1658850976,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/757341639/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"47.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    //TreeNode ans = null;\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if(root == null || root == p || root == q)  return root;\n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n        if(left != null && right != null)   return root;\n        return left != null ? left : right;\n        /*traverse(root,p,q);\n        return ans;\n    }\n    boolean traverse(TreeNode node, TreeNode p, TreeNode q){\n        if(node==null)  return false;\n        boolean first = node==p || node==q;\n        if((traverse(node.left,p,q) && first) || (traverse(node.right,p,q) && first) || (traverse(node.left,p,q) && traverse(node.right,p,q))) ans = node;\n        return first || traverse(node.left,p,q) || traverse(node.right,p,q);\n    */\n    }\n}","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}