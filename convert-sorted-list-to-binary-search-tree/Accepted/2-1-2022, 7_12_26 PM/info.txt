{"id":632264445,"lang":"java","time":"6 months, 2 weeks","timestamp":1643722946,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/632264445/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"48.1 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        ArrayList<Integer> al=new ArrayList<Integer>();\n        while(head!=null){\n            al.add(head.val);\n            head=head.next;\n        }\n        if(al.size()==0)    return null;\n        int[] num=new int[al.size()];\n        for(int i=0;i<al.size();i++){\n            num[i]= (int)al.get(i);\n        }\n        Arrays.sort(num);\n        return tree(num,0,num.length-1);\n    }\n    public TreeNode tree(int[] nums,int l,int h){\n        if(l>h){\n            return null;\n        }\n        int m=(l+h)/2;\n        TreeNode head=new TreeNode(nums[m]);\n        head.left= tree(nums,l,m-1);\n        head.right= tree(nums,m+1,h);\n        return head;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree"}